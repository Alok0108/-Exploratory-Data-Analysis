library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(swirl)
install_course("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col= "blue")
abline(h=.4, col= "red")
5
12
abline(h=.05, col= "green")
dist(dFsm)
hc
heatmap(dataMatrix, Colv = cm.colors(25))
heatmap(dataMatrix, Col = cm.colors(25))
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmt
cmat
points(cx,cy,col("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
points(cx,cy,col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd =2)
mdist(x,y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, 3)
kmObj$iter
plot(x, y, col = kmObj$cluster,pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit(addPatt.R)
myedit("addPatt.R")
myedit(name = "addPatt.R")
myedit("addPatt.R")
setwd("~/")
myedit("addPatt.R")
myedit("addPatt.R")
myedit("addPart.R")
q()
options(editor = "internal")
library(swirl)
swirl()
myedit("addPart.R")
myedit("addPart.R")
info()
skip()
source("addPart.R", local = TRUE)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
diag %*% matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
skip()
myImage(a1)
skip()
myImage(a2)
skip()
myImage(svd1$u[,1:10] %*%  diag(svd1$d[1:10])  %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist(sub1[,1:3])
skip()
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(maxCon], 10:12)])
mdist <- dist(sub1[,c(maxCon, 10:12)])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
strsplit(cnames, "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1 <0
sum(negative, na.rm = TRUE)
mean(is.na(negative))
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% pm1)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code ==63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code ==63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(median(x0sub), lwd = 2, na.rm = TRUE)
abline(h = median(x0sub, na.rm = T))
abline(h = median(x0sub, na.rm = T), lwd = 2)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame((state = names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0,d1,by = "state")
dim(mrg)
head(mrg)
par(mfrow = c(1, 1))
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y, ]
setwd("~/Data Science Specialization/Data Science repo/Exploratory-Data-Analysis")
setwd("~/Data Science Specialization")
setwd("~/Data Science Specialization/Data Science repo/Exploratory-Data-Analysis")
# Read PM2.5 emissions dataset
nei <- readRDS('Data/summarySCC_PM25.rds')
# Read emission source classification dataset
scc <- readRDS('Data/Source_Classification_Code.rds')
# Get the total emissions by year
emission.totals.by.year <- aggregate(Emissions ~ year, data = nei, FUN = sum)
# Open png device
png(filename='plot1.png', width=480, height=480, units='px')
# Print numeric values in fixed notation
options(scipen=10)
with(emission.totals.by.year, {
plot(year, Emissions, type = 'b',
xlab="Year",
ylab='PM2.5 Emissions (tons)',
main='Total PM2.5 Emissions in U.S.A.')
})
# Close png device
dev.off()
# Get the emissions in Baltimore City
baltimore.emissions.df = nei[nei$fips == '24510', ]
# Get the total emissions in Baltimore City by year
baltimore.emission.totals.by.year <- aggregate(Emissions ~ year, data = baltimore.emissions.df, FUN = sum)
# Open png device
png(filename='plot2.png', width=480, height=480, units='px')
# Print numeric values in fixed notation
options(scipen=10)
with(baltimore.emission.totals.by.year, {
plot(year, Emissions, type = 'b',
xlab="Year",
ylab='PM2.5 Emissions (tons)',
main='Total PM2.5 Emissions in Baltimore City')
})
# Close png device
dev.off()
library(ggplot2)
# Get the emissions in Baltimore City
baltimore.emissions.df = nei[nei$fips == '24510', ]
# Get the total emissions in Baltimore, grouped by type and year
baltimore.emission.totals.df <- aggregate(Emissions ~ type + year, baltimore.emissions.df, FUN = sum)
# Open png device
png(filename='plot3.png', width=1200, height=640, units='px')
# Print numeric values in fixed notation
options(scipen=10)
plot3 <- qplot(year, Emissions, data=baltimore.emission.totals.df, facets = . ~ type) +
geom_line() +
xlab("Year") +
ylab('PM2.5 Emissions (tons)') +
ggtitle('Total PM2.5 Emissions in Baltimore City')
print(plot3)
# Close png device
dev.off()
# Get the coal combustion-related sources
# Use the 'Short.Name' field to find the coal combustion-related sources
scc.coal.df <- scc[grep('coal', scc$Short.Name), ]
# Get the emissions from coal combustion-related sources
coal.emissions.df <- nei[nei$SCC %in% scc.coal.df$SCC, ]
# Get the total emissions from coal combustion-related sources by year
coal.emissions.by.year.df <- aggregate(Emissions ~ year, data = coal.emissions.df, FUN = sum)
# Open png device
png(filename='plot4.png', width=480, height=480, units='px')
# Print numeric values in fixed notation
options(scipen=10)
with(coal.emissions.by.year.df, {
plot(year, Emissions, type = 'b',
xlab="Year",
ylab='PM2.5 Emissions (tons)',
main='PM2.5 Emissions from coal combustion sources in U.S.A.')
})
# Close png device
dev.off()
# Get the emissions from motor vehicle sources (type = ON-ROAD) in Baltimore City (fips code: '24510')
baltimore.motor.emissions.df <- nei[nei$type == 'ON-ROAD' & nei$fips == '24510', ]
# Get the total Baltimore emissions from motor vehicle sources by year
baltimore.motor.emissions.by.year.df <- aggregate(Emissions ~ year, data = baltimore.motor.emissions.df, FUN = sum)
# Open png device
png(filename='plot5.png', width=480, height=480, units='px')
# Print numeric values in fixed notation
options(scipen=10)
with(baltimore.motor.emissions.by.year.df, {
plot(year, Emissions, type = 'b',
xlab="Year",
ylab='PM2.5 Emissions (tons)',
main='PM2.5 Emissions from motor vehicle sources in Baltimore City')
})
# Close png device
dev.off()
# Get the emissions from motor vehicle sources (type = ON-ROAD) in Baltimore City (fips code: '24510') and Los Angeles (fips code: '06037')
city.emissions.df <- nei[nei$type == 'ON-ROAD' & nei$fips %in% c('24510', '06037'), ]
# Get the total emissions for Baltimore City and Los Angeles, grouped by year and city
city.emissions.by.year.df <- aggregate(Emissions ~ year + fips, data = city.emissions.df, FUN = sum)
# Add city names for use in the plot
city.emissions.by.year.df$city = city.emissions.by.year.df$fips
city.emissions.by.year.df[which(city.emissions.by.year.df$fips == '24510'), 'city'] = 'Baltimore City'
city.emissions.by.year.df[which(city.emissions.by.year.df$fips == '06037'), 'city'] = 'Los Angeles'
# Open png device
png(filename='plot6.png', width=640, height=480, units='px')
# Print numeric values in fixed notation
options(scipen=10)
plot6 <- qplot(year, Emissions, data=city.emissions.by.year.df, facets = . ~ fips) +
geom_line() +
xlab("Year") +
ylab('PM2.5 Emissions (tons)') +
ggtitle('Total PM2.5 Emissions in Los Angeles (06037) and Baltimore City (24510)')
print(plot6)
# Close png device
dev.off()
